package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_parcels_service "github.com/dir01/parcels/service"
	"github.com/gojuno/minimock/v3"
)

// StorageMock implements service.Storage
type StorageMock struct {
	t minimock.Tester

	funcGetLatest          func(ctx context.Context, trackingNumber string, apiNames []string) (ppa1 []*mm_parcels_service.PostalApiResponse, err error)
	inspectFuncGetLatest   func(ctx context.Context, trackingNumber string, apiNames []string)
	afterGetLatestCounter  uint64
	beforeGetLatestCounter uint64
	GetLatestMock          mStorageMockGetLatest

	funcInsert          func(ctx context.Context, trackingNumber string, apiName string, response *mm_parcels_service.PostalApiResponse) (err error)
	inspectFuncInsert   func(ctx context.Context, trackingNumber string, apiName string, response *mm_parcels_service.PostalApiResponse)
	afterInsertCounter  uint64
	beforeInsertCounter uint64
	InsertMock          mStorageMockInsert

	funcUpdate          func(ctx context.Context, pp1 *mm_parcels_service.PostalApiResponse) (err error)
	inspectFuncUpdate   func(ctx context.Context, pp1 *mm_parcels_service.PostalApiResponse)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mStorageMockUpdate
}

// NewStorageMock returns a mock for service.Storage
func NewStorageMock(t minimock.Tester) *StorageMock {
	m := &StorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetLatestMock = mStorageMockGetLatest{mock: m}
	m.GetLatestMock.callArgs = []*StorageMockGetLatestParams{}

	m.InsertMock = mStorageMockInsert{mock: m}
	m.InsertMock.callArgs = []*StorageMockInsertParams{}

	m.UpdateMock = mStorageMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*StorageMockUpdateParams{}

	return m
}

type mStorageMockGetLatest struct {
	mock               *StorageMock
	defaultExpectation *StorageMockGetLatestExpectation
	expectations       []*StorageMockGetLatestExpectation

	callArgs []*StorageMockGetLatestParams
	mutex    sync.RWMutex
}

// StorageMockGetLatestExpectation specifies expectation struct of the Storage.GetLatest
type StorageMockGetLatestExpectation struct {
	mock    *StorageMock
	params  *StorageMockGetLatestParams
	results *StorageMockGetLatestResults
	Counter uint64
}

// StorageMockGetLatestParams contains parameters of the Storage.GetLatest
type StorageMockGetLatestParams struct {
	ctx            context.Context
	trackingNumber string
	apiNames       []string
}

// StorageMockGetLatestResults contains results of the Storage.GetLatest
type StorageMockGetLatestResults struct {
	ppa1 []*mm_parcels_service.PostalApiResponse
	err  error
}

// Expect sets up expected params for Storage.GetLatest
func (mmGetLatest *mStorageMockGetLatest) Expect(ctx context.Context, trackingNumber string, apiNames []string) *mStorageMockGetLatest {
	if mmGetLatest.mock.funcGetLatest != nil {
		mmGetLatest.mock.t.Fatalf("StorageMock.GetLatest mock is already set by Set")
	}

	if mmGetLatest.defaultExpectation == nil {
		mmGetLatest.defaultExpectation = &StorageMockGetLatestExpectation{}
	}

	mmGetLatest.defaultExpectation.params = &StorageMockGetLatestParams{ctx, trackingNumber, apiNames}
	for _, e := range mmGetLatest.expectations {
		if minimock.Equal(e.params, mmGetLatest.defaultExpectation.params) {
			mmGetLatest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetLatest.defaultExpectation.params)
		}
	}

	return mmGetLatest
}

// Inspect accepts an inspector function that has same arguments as the Storage.GetLatest
func (mmGetLatest *mStorageMockGetLatest) Inspect(f func(ctx context.Context, trackingNumber string, apiNames []string)) *mStorageMockGetLatest {
	if mmGetLatest.mock.inspectFuncGetLatest != nil {
		mmGetLatest.mock.t.Fatalf("Inspect function is already set for StorageMock.GetLatest")
	}

	mmGetLatest.mock.inspectFuncGetLatest = f

	return mmGetLatest
}

// Return sets up results that will be returned by Storage.GetLatest
func (mmGetLatest *mStorageMockGetLatest) Return(ppa1 []*mm_parcels_service.PostalApiResponse, err error) *StorageMock {
	if mmGetLatest.mock.funcGetLatest != nil {
		mmGetLatest.mock.t.Fatalf("StorageMock.GetLatest mock is already set by Set")
	}

	if mmGetLatest.defaultExpectation == nil {
		mmGetLatest.defaultExpectation = &StorageMockGetLatestExpectation{mock: mmGetLatest.mock}
	}
	mmGetLatest.defaultExpectation.results = &StorageMockGetLatestResults{ppa1, err}
	return mmGetLatest.mock
}

// Set uses given function f to mock the Storage.GetLatest method
func (mmGetLatest *mStorageMockGetLatest) Set(f func(ctx context.Context, trackingNumber string, apiNames []string) (ppa1 []*mm_parcels_service.PostalApiResponse, err error)) *StorageMock {
	if mmGetLatest.defaultExpectation != nil {
		mmGetLatest.mock.t.Fatalf("Default expectation is already set for the Storage.GetLatest method")
	}

	if len(mmGetLatest.expectations) > 0 {
		mmGetLatest.mock.t.Fatalf("Some expectations are already set for the Storage.GetLatest method")
	}

	mmGetLatest.mock.funcGetLatest = f
	return mmGetLatest.mock
}

// When sets expectation for the Storage.GetLatest which will trigger the result defined by the following
// Then helper
func (mmGetLatest *mStorageMockGetLatest) When(ctx context.Context, trackingNumber string, apiNames []string) *StorageMockGetLatestExpectation {
	if mmGetLatest.mock.funcGetLatest != nil {
		mmGetLatest.mock.t.Fatalf("StorageMock.GetLatest mock is already set by Set")
	}

	expectation := &StorageMockGetLatestExpectation{
		mock:   mmGetLatest.mock,
		params: &StorageMockGetLatestParams{ctx, trackingNumber, apiNames},
	}
	mmGetLatest.expectations = append(mmGetLatest.expectations, expectation)
	return expectation
}

// Then sets up Storage.GetLatest return parameters for the expectation previously defined by the When method
func (e *StorageMockGetLatestExpectation) Then(ppa1 []*mm_parcels_service.PostalApiResponse, err error) *StorageMock {
	e.results = &StorageMockGetLatestResults{ppa1, err}
	return e.mock
}

// GetLatest implements service.Storage
func (mmGetLatest *StorageMock) GetLatest(ctx context.Context, trackingNumber string, apiNames []string) (ppa1 []*mm_parcels_service.PostalApiResponse, err error) {
	mm_atomic.AddUint64(&mmGetLatest.beforeGetLatestCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLatest.afterGetLatestCounter, 1)

	if mmGetLatest.inspectFuncGetLatest != nil {
		mmGetLatest.inspectFuncGetLatest(ctx, trackingNumber, apiNames)
	}

	mm_params := &StorageMockGetLatestParams{ctx, trackingNumber, apiNames}

	// Record call args
	mmGetLatest.GetLatestMock.mutex.Lock()
	mmGetLatest.GetLatestMock.callArgs = append(mmGetLatest.GetLatestMock.callArgs, mm_params)
	mmGetLatest.GetLatestMock.mutex.Unlock()

	for _, e := range mmGetLatest.GetLatestMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ppa1, e.results.err
		}
	}

	if mmGetLatest.GetLatestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLatest.GetLatestMock.defaultExpectation.Counter, 1)
		mm_want := mmGetLatest.GetLatestMock.defaultExpectation.params
		mm_got := StorageMockGetLatestParams{ctx, trackingNumber, apiNames}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetLatest.t.Errorf("StorageMock.GetLatest got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetLatest.GetLatestMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLatest.t.Fatal("No results are set for the StorageMock.GetLatest")
		}
		return (*mm_results).ppa1, (*mm_results).err
	}
	if mmGetLatest.funcGetLatest != nil {
		return mmGetLatest.funcGetLatest(ctx, trackingNumber, apiNames)
	}
	mmGetLatest.t.Fatalf("Unexpected call to StorageMock.GetLatest. %v %v %v", ctx, trackingNumber, apiNames)
	return
}

// GetLatestAfterCounter returns a count of finished StorageMock.GetLatest invocations
func (mmGetLatest *StorageMock) GetLatestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLatest.afterGetLatestCounter)
}

// GetLatestBeforeCounter returns a count of StorageMock.GetLatest invocations
func (mmGetLatest *StorageMock) GetLatestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLatest.beforeGetLatestCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.GetLatest.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetLatest *mStorageMockGetLatest) Calls() []*StorageMockGetLatestParams {
	mmGetLatest.mutex.RLock()

	argCopy := make([]*StorageMockGetLatestParams, len(mmGetLatest.callArgs))
	copy(argCopy, mmGetLatest.callArgs)

	mmGetLatest.mutex.RUnlock()

	return argCopy
}

// MinimockGetLatestDone returns true if the count of the GetLatest invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockGetLatestDone() bool {
	for _, e := range m.GetLatestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLatestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLatestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLatest != nil && mm_atomic.LoadUint64(&m.afterGetLatestCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLatestInspect logs each unmet expectation
func (m *StorageMock) MinimockGetLatestInspect() {
	for _, e := range m.GetLatestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.GetLatest with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLatestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLatestCounter) < 1 {
		if m.GetLatestMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.GetLatest")
		} else {
			m.t.Errorf("Expected call to StorageMock.GetLatest with params: %#v", *m.GetLatestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLatest != nil && mm_atomic.LoadUint64(&m.afterGetLatestCounter) < 1 {
		m.t.Error("Expected call to StorageMock.GetLatest")
	}
}

type mStorageMockInsert struct {
	mock               *StorageMock
	defaultExpectation *StorageMockInsertExpectation
	expectations       []*StorageMockInsertExpectation

	callArgs []*StorageMockInsertParams
	mutex    sync.RWMutex
}

// StorageMockInsertExpectation specifies expectation struct of the Storage.Insert
type StorageMockInsertExpectation struct {
	mock    *StorageMock
	params  *StorageMockInsertParams
	results *StorageMockInsertResults
	Counter uint64
}

// StorageMockInsertParams contains parameters of the Storage.Insert
type StorageMockInsertParams struct {
	ctx            context.Context
	trackingNumber string
	apiName        string
	response       *mm_parcels_service.PostalApiResponse
}

// StorageMockInsertResults contains results of the Storage.Insert
type StorageMockInsertResults struct {
	err error
}

// Expect sets up expected params for Storage.Insert
func (mmInsert *mStorageMockInsert) Expect(ctx context.Context, trackingNumber string, apiName string, response *mm_parcels_service.PostalApiResponse) *mStorageMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("StorageMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &StorageMockInsertExpectation{}
	}

	mmInsert.defaultExpectation.params = &StorageMockInsertParams{ctx, trackingNumber, apiName, response}
	for _, e := range mmInsert.expectations {
		if minimock.Equal(e.params, mmInsert.defaultExpectation.params) {
			mmInsert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsert.defaultExpectation.params)
		}
	}

	return mmInsert
}

// Inspect accepts an inspector function that has same arguments as the Storage.Insert
func (mmInsert *mStorageMockInsert) Inspect(f func(ctx context.Context, trackingNumber string, apiName string, response *mm_parcels_service.PostalApiResponse)) *mStorageMockInsert {
	if mmInsert.mock.inspectFuncInsert != nil {
		mmInsert.mock.t.Fatalf("Inspect function is already set for StorageMock.Insert")
	}

	mmInsert.mock.inspectFuncInsert = f

	return mmInsert
}

// Return sets up results that will be returned by Storage.Insert
func (mmInsert *mStorageMockInsert) Return(err error) *StorageMock {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("StorageMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &StorageMockInsertExpectation{mock: mmInsert.mock}
	}
	mmInsert.defaultExpectation.results = &StorageMockInsertResults{err}
	return mmInsert.mock
}

// Set uses given function f to mock the Storage.Insert method
func (mmInsert *mStorageMockInsert) Set(f func(ctx context.Context, trackingNumber string, apiName string, response *mm_parcels_service.PostalApiResponse) (err error)) *StorageMock {
	if mmInsert.defaultExpectation != nil {
		mmInsert.mock.t.Fatalf("Default expectation is already set for the Storage.Insert method")
	}

	if len(mmInsert.expectations) > 0 {
		mmInsert.mock.t.Fatalf("Some expectations are already set for the Storage.Insert method")
	}

	mmInsert.mock.funcInsert = f
	return mmInsert.mock
}

// When sets expectation for the Storage.Insert which will trigger the result defined by the following
// Then helper
func (mmInsert *mStorageMockInsert) When(ctx context.Context, trackingNumber string, apiName string, response *mm_parcels_service.PostalApiResponse) *StorageMockInsertExpectation {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("StorageMock.Insert mock is already set by Set")
	}

	expectation := &StorageMockInsertExpectation{
		mock:   mmInsert.mock,
		params: &StorageMockInsertParams{ctx, trackingNumber, apiName, response},
	}
	mmInsert.expectations = append(mmInsert.expectations, expectation)
	return expectation
}

// Then sets up Storage.Insert return parameters for the expectation previously defined by the When method
func (e *StorageMockInsertExpectation) Then(err error) *StorageMock {
	e.results = &StorageMockInsertResults{err}
	return e.mock
}

// Insert implements service.Storage
func (mmInsert *StorageMock) Insert(ctx context.Context, trackingNumber string, apiName string, response *mm_parcels_service.PostalApiResponse) (err error) {
	mm_atomic.AddUint64(&mmInsert.beforeInsertCounter, 1)
	defer mm_atomic.AddUint64(&mmInsert.afterInsertCounter, 1)

	if mmInsert.inspectFuncInsert != nil {
		mmInsert.inspectFuncInsert(ctx, trackingNumber, apiName, response)
	}

	mm_params := &StorageMockInsertParams{ctx, trackingNumber, apiName, response}

	// Record call args
	mmInsert.InsertMock.mutex.Lock()
	mmInsert.InsertMock.callArgs = append(mmInsert.InsertMock.callArgs, mm_params)
	mmInsert.InsertMock.mutex.Unlock()

	for _, e := range mmInsert.InsertMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInsert.InsertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsert.InsertMock.defaultExpectation.Counter, 1)
		mm_want := mmInsert.InsertMock.defaultExpectation.params
		mm_got := StorageMockInsertParams{ctx, trackingNumber, apiName, response}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsert.t.Errorf("StorageMock.Insert got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsert.InsertMock.defaultExpectation.results
		if mm_results == nil {
			mmInsert.t.Fatal("No results are set for the StorageMock.Insert")
		}
		return (*mm_results).err
	}
	if mmInsert.funcInsert != nil {
		return mmInsert.funcInsert(ctx, trackingNumber, apiName, response)
	}
	mmInsert.t.Fatalf("Unexpected call to StorageMock.Insert. %v %v %v %v", ctx, trackingNumber, apiName, response)
	return
}

// InsertAfterCounter returns a count of finished StorageMock.Insert invocations
func (mmInsert *StorageMock) InsertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.afterInsertCounter)
}

// InsertBeforeCounter returns a count of StorageMock.Insert invocations
func (mmInsert *StorageMock) InsertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.beforeInsertCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.Insert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsert *mStorageMockInsert) Calls() []*StorageMockInsertParams {
	mmInsert.mutex.RLock()

	argCopy := make([]*StorageMockInsertParams, len(mmInsert.callArgs))
	copy(argCopy, mmInsert.callArgs)

	mmInsert.mutex.RUnlock()

	return argCopy
}

// MinimockInsertDone returns true if the count of the Insert invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockInsertDone() bool {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	return true
}

// MinimockInsertInspect logs each unmet expectation
func (m *StorageMock) MinimockInsertInspect() {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.Insert with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		if m.InsertMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.Insert")
		} else {
			m.t.Errorf("Expected call to StorageMock.Insert with params: %#v", *m.InsertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		m.t.Error("Expected call to StorageMock.Insert")
	}
}

type mStorageMockUpdate struct {
	mock               *StorageMock
	defaultExpectation *StorageMockUpdateExpectation
	expectations       []*StorageMockUpdateExpectation

	callArgs []*StorageMockUpdateParams
	mutex    sync.RWMutex
}

// StorageMockUpdateExpectation specifies expectation struct of the Storage.Update
type StorageMockUpdateExpectation struct {
	mock    *StorageMock
	params  *StorageMockUpdateParams
	results *StorageMockUpdateResults
	Counter uint64
}

// StorageMockUpdateParams contains parameters of the Storage.Update
type StorageMockUpdateParams struct {
	ctx context.Context
	pp1 *mm_parcels_service.PostalApiResponse
}

// StorageMockUpdateResults contains results of the Storage.Update
type StorageMockUpdateResults struct {
	err error
}

// Expect sets up expected params for Storage.Update
func (mmUpdate *mStorageMockUpdate) Expect(ctx context.Context, pp1 *mm_parcels_service.PostalApiResponse) *mStorageMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("StorageMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &StorageMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &StorageMockUpdateParams{ctx, pp1}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the Storage.Update
func (mmUpdate *mStorageMockUpdate) Inspect(f func(ctx context.Context, pp1 *mm_parcels_service.PostalApiResponse)) *mStorageMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for StorageMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by Storage.Update
func (mmUpdate *mStorageMockUpdate) Return(err error) *StorageMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("StorageMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &StorageMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &StorageMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the Storage.Update method
func (mmUpdate *mStorageMockUpdate) Set(f func(ctx context.Context, pp1 *mm_parcels_service.PostalApiResponse) (err error)) *StorageMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the Storage.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the Storage.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the Storage.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mStorageMockUpdate) When(ctx context.Context, pp1 *mm_parcels_service.PostalApiResponse) *StorageMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("StorageMock.Update mock is already set by Set")
	}

	expectation := &StorageMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &StorageMockUpdateParams{ctx, pp1},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up Storage.Update return parameters for the expectation previously defined by the When method
func (e *StorageMockUpdateExpectation) Then(err error) *StorageMock {
	e.results = &StorageMockUpdateResults{err}
	return e.mock
}

// Update implements service.Storage
func (mmUpdate *StorageMock) Update(ctx context.Context, pp1 *mm_parcels_service.PostalApiResponse) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, pp1)
	}

	mm_params := &StorageMockUpdateParams{ctx, pp1}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := StorageMockUpdateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("StorageMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the StorageMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, pp1)
	}
	mmUpdate.t.Fatalf("Unexpected call to StorageMock.Update. %v %v", ctx, pp1)
	return
}

// UpdateAfterCounter returns a count of finished StorageMock.Update invocations
func (mmUpdate *StorageMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of StorageMock.Update invocations
func (mmUpdate *StorageMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mStorageMockUpdate) Calls() []*StorageMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*StorageMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *StorageMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.Update")
		} else {
			m.t.Errorf("Expected call to StorageMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to StorageMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetLatestInspect()

		m.MinimockInsertInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetLatestDone() &&
		m.MinimockInsertDone() &&
		m.MinimockUpdateDone()
}
